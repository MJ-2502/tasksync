rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- USERS COLLECTION ---
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;

      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /task_seen/{seenId} {
        allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- PROJECTS COLLECTION ---
    match /projects/{projectId} {
      allow create: if request.auth != null &&
        request.resource.data.ownerId == request.auth.uid &&
        request.auth.uid in request.resource.data.memberIds;

      // ✅ Allow reading if user is a member OR has a pending invite
      allow read: if request.auth != null && (
        request.auth.uid in resource.data.memberIds ||
        (
          request.auth.token.email != null &&
          exists(/databases/$(database)/documents/project_invites/$(projectId + "_" + request.auth.token.email.lower()))
        )
      );

      allow update, delete: if request.auth != null &&
        request.auth.uid == resource.data.ownerId;

      // Allow invited users to add themselves to memberIds
      allow update: if request.auth != null &&
        request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
        request.auth.uid in request.resource.data.memberIds &&
        !(request.auth.uid in resource.data.memberIds);
    }

    // --- GLOBAL PROJECT INVITES ---
    match /project_invites/{inviteId} {
      // ✅ Allow creation
      allow create: if request.auth != null &&
        request.resource.data.invitedBy == request.auth.uid &&
        request.resource.data.email == request.resource.data.email.lower();

      // ✅ Allow read (both list and get) if user is authenticated
      // We'll filter in the client, rules just need to allow the query
      allow read: if request.auth != null &&
        request.auth.token.email != null;

      // ✅ Allow delete if email matches OR user is the inviter
      allow delete: if request.auth != null &&
        request.auth.token.email != null && (
          resource.data.email == request.auth.token.email.lower() ||
          resource.data.invitedBy == request.auth.uid
        );

      allow update: if false;
    }

    // --- ACTIVITY LOGS ---
    match /activity_logs/{logId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // --- INTERNAL SYSTEM QUEUE ---
    match /notifications_queue/{notificationId} {
      allow read, write: if false;
    }
    
    // --- TOP-LEVEL TASKS COLLECTION ---
    match /tasks/{taskId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }

    // --- TASKS SUBCOLLECTION UNDER PROJECTS ---
    match /projects/{projectId} {
      match /tasks/{taskId} {
        allow read, create: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberIds;

        allow update: if request.auth != null && (
          request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId ||
          (
            request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberIds &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['completed', 'status'])
          )
        );

        allow delete: if request.auth != null && (
          request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId ||
          request.auth.uid == resource.data.createdBy
        );
      }
    }
  }
}